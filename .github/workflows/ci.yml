name: ci

env:
   HOMEBREW_NO_INSTALL_CLEANUP: 1

on:
  push:
    paths:
      - "**.c"
      - "**.cpp"
      - "**.f90"
      - "**.F90"
      - "**/CMakeLists.txt"
      - "**.cmake"
      - ".github/workflows/ci.yml"


jobs:

  linux_mac:
    timeout-minutes: 15

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        shared: [true, false]
        gcc: [8, 11]
        exclude:
        - os: macos-latest
          gcc: 8

    runs-on: ${{ matrix.os }}
    env:
      CC: gcc-${{ matrix.gcc }}
      FC: gfortran-${{ matrix.gcc }}

    steps:

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Python pkgs
      run: pip install numpy h5py

    - name: install HDF5 (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install --no-install-recommends gcc-${{ matrix.gcc }} gfortran-${{ matrix.gcc}} ninja-build libhdf5-dev

    - name: Install HDF5 (MacOS)
      if: runner.os == 'macOS'
      run: |
        brew install hdf5 ninja
        brew reinstall gcc

    - uses: actions/checkout@v3

    - name: Configure h5fortran
      run: cmake --preset multi -DCMAKE_INSTALL_PREFIX=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: Build Debug
      run: cmake --build --parallel --preset debug
    - name: Test Debug
      run: ctest --preset debug --output-junit test-debug.xml

    - name: Build Release
      run: cmake --build --parallel --preset release
    - name: Test Release
      run: ctest --preset release --output-junit test-release.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: build/test-*.xml

    - run: cmake --install build

    - name: configure examples
      run: cmake -S example -B example/build -DCMAKE_PREFIX_PATH:PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
    - name: build examples
      run: cmake --build example/build --parallel
    - name: Test examples
      run: ctest --test-dir example/build -V


  linux-coverage:
    needs: linux_mac
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: install hdf5
      run: |
        sudo apt update
        sudo apt install --no-install-recommends libhdf5-dev

    - name: install Gcovr
      run: pip install gcovr

    - run: cmake --preset coverage
    - run: cmake --build --parallel --preset coverage

    - name: Code coverage
      run: cmake --build --parallel --preset run-coverage

    - uses: actions/upload-artifact@v3
      with:
        name: coverage-report-html
        path: build-coverage/coverage/



  msys2:
    timeout-minutes: 30
    runs-on: windows-latest
    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      matrix:
        shared: [false]
        # true works on my computers, but CI is false failing

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-hdf5

    - name: Put MSYS2_MinGW64 on PATH
      run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: install h5py
      run: pip install h5py

    - uses: actions/checkout@v3

    - run: cmake --preset multi -DCMAKE_INSTALL_PREFIX=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --parallel --preset debug
    - run: ctest --preset debug -V

    - run: cmake --build --parallel --preset release
    - run: ctest --preset release

    - run: cmake --install build

    - name: configure examples
      run: cmake -S example -B example/build -DCMAKE_PREFIX_PATH:PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
    - name: build Examples
      run: cmake --build example/build --parallel
    - name: Test Examples
      run: ctest --test-dir example/build -V
